name: release
on:
  push:
    tags:
      - "v*"
  release:
    types: [created]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-13
            target: x86_64-apple-darwin
            out_os: darwin
            out_arch: amd64
          - os: macos-14
            target: aarch64-apple-darwin
            out_os: darwin
            out_arch: arm64
          - os: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
            out_os: linux
            out_arch: amd64
          - os: ubuntu-24.04
            target: aarch64-unknown-linux-gnu
            out_os: linux
            out_arch: arm64
          - os: windows-2022
            target: x86_64-pc-windows-msvc
            out_os: windows
            out_arch: amd64

    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install dependencies (Linux OpenSSL)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y pkg-config libssl-dev

      - name: Install dependencies (Linux cross-aarch64)
        if: runner.os == 'Linux' && matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo dpkg --add-architecture arm64
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu pkg-config-aarch64-linux-gnu libssl-dev:arm64
        env:
          DEBIAN_FRONTEND: noninteractive

      - name: Set cross env (aarch64-unknown-linux-gnu)
        if: runner.os == 'Linux' && matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig" >> $GITHUB_ENV
          echo "OPENSSL_STATIC=1" >> $GITHUB_ENV
      - name: Cargo build (release)
        if: runner.os != 'Windows'
        shell: bash
        run: cargo build --release --target ${{ matrix.target }}

      - name: Cargo build (release) - Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package artifact (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $bin = 'phpvm.exe'
          $src = "target/${{ matrix.target }}/release/$bin"
          $outdir = "dist"
          New-Item -ItemType Directory -Force -Path $outdir | Out-Null
          $zip = "$outdir/phpvm-windows-${{ matrix.out_arch }}.zip"
          Compress-Archive -Path $src -DestinationPath $zip -Force

      - name: Package artifact (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          set -euo pipefail
          BIN=phpvm
          OUTDIR=dist
          mkdir -p "$OUTDIR"
          SRC="target/${{ matrix.target }}/release/${BIN}"
          TARBALL="${OUTDIR}/${BIN}-${{ matrix.out_os }}-${{ matrix.out_arch }}.tar.gz"
          tar -C "$(dirname "$SRC")" -czf "$TARBALL" "$(basename "$SRC")"

      - name: Generate checksums
        shell: bash
        run: |
          set -euo pipefail
          cd dist
          shopt -s nullglob
          rm -f SHA256SUMS
          for f in *.tar.gz *.zip; do
            [ -f "$f" ] || continue
            if command -v sha256sum >/dev/null 2>&1; then
              sha256sum "$f" >> SHA256SUMS
            else
              shasum -a 256 "$f" >> SHA256SUMS
            fi
          done

      - name: Upload release artifacts
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}